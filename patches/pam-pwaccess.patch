commit 1911492842b892e9ea1d42eb12bb31dff632ec58
Author: Thorsten Kukuk <kukuk@suse.com>
Date:   Fri Jun 20 14:01:48 2025 +0200

    pam_unix: add support for pwaccessd (#902)

diff --git a/meson.build b/meson.build
index 0827a53e..d4e41a4d 100644
--- a/meson.build
+++ b/meson.build
@@ -263,6 +263,10 @@ foreach f: ['crypt_r']
   endif
 endforeach
 
+libpwaccess = dependency('libpwaccess', required: get_option('pwaccess'))
+if libpwaccess.found()
+  cdata.set('USE_PWACCESS', 1)
+endif
 
 libeconf = dependency('libeconf', version: '>= 0.5.0', required: get_option('econf'))
 if libeconf.found()
diff --git a/meson_options.txt b/meson_options.txt
index a172ceea..51fd1082 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -14,6 +14,8 @@ option('elogind', type: 'feature', value: 'auto',
        description: 'logind support in pam_issue, pam_limits, and pam_timestamp via elogind')
 option('openssl', type: 'feature', value: 'disabled',
        description: 'Use OpenSSL crypto libraries in pam_timestamp')
+option('pwaccess', type: 'feature', value: 'auto',
+       description: 'libpwaccess support in pam_unix')
 option('selinux', type: 'feature', value: 'auto',
        description: 'SELinux support')
 option('nis', type: 'feature', value: 'auto',
diff --git a/modules/module-meson.build b/modules/module-meson.build
index dce38b90..b5914358 100644
--- a/modules/module-meson.build
+++ b/modules/module-meson.build
@@ -116,7 +116,7 @@ if module == 'pam_unix'
   endif
   pam_module_c_args += ['-DCHKPWD_HELPER="@0@"'.format(sbindir / 'unix_chkpwd'),
                         '-DUPDATE_HELPER="@0@"'.format(sbindir / 'unix_update')]
-  pam_module_deps += [libcrypt, libselinux, libtirpc, libnsl]
+  pam_module_deps += [libcrypt, libselinux, libtirpc, libnsl, libpwaccess]
 endif
 if module == 'pam_userdb'
   if not enable_pam_userdb
diff --git a/modules/pam_unix/pam_unix_passwd.c b/modules/pam_unix/pam_unix_passwd.c
index dbc9fb76..f2f5900e 100644
--- a/modules/pam_unix/pam_unix_passwd.c
+++ b/modules/pam_unix/pam_unix_passwd.c
@@ -522,7 +522,11 @@ static int _unix_verify_shadow(pam_handle_t *pamh, const char *user, unsigned lo
 		return PAM_SUCCESS;
 
 	if (retval == PAM_UNIX_RUN_HELPER) {
-		retval = _unix_run_verify_binary(pamh, ctrl, user, &daysleft);
+#ifdef USE_PWACCESS
+	        retval = _unix_pwaccess_check_expired(pamh, user, &daysleft);
+		if (retval == PAM_SYSTEM_ERR) /* pwaccess not running */
+#endif
+			retval = _unix_run_verify_binary(pamh, ctrl, user, &daysleft);
 		if (retval == PAM_AUTH_ERR || retval == PAM_USER_UNKNOWN)
 			return retval;
 	}
diff --git a/modules/pam_unix/support.c b/modules/pam_unix/support.c
index 652e35b2..5c0f282e 100644
--- a/modules/pam_unix/support.c
+++ b/modules/pam_unix/support.c
@@ -22,6 +22,9 @@
 #ifdef HAVE_NIS
 #include <rpcsvc/ypclnt.h>
 #endif
+#ifdef USE_PWACCESS
+#include <pwaccess.h>
+#endif
 
 #include <security/_pam_macros.h>
 #include <security/pam_modules.h>
@@ -515,6 +518,93 @@ int _unix_comesfromsource(pam_handle_t *pamh,
 #include <sys/types.h>
 #include <sys/wait.h>
 
+#ifdef USE_PWACCESS
+int _unix_pwaccess_check_expired(pam_handle_t *pamh, const char *user,
+				 long *daysleft)
+{
+    int  r, retval = PAM_SYSTEM_ERR;
+    bool pwchangeable = false;
+    long dl = -1;
+    char *error = NULL;
+
+    D(("called."));
+
+    r = pwaccess_check_expired(user, &dl, &pwchangeable, &error);
+    if (r < 0 || error) {
+        if (PWACCESS_IS_NOT_RUNNING(r)) {
+	    free(error);
+	    return PAM_SYSTEM_ERR;
+	}
+	if (r == -ENOENT) {
+	    free(error);
+	    return PAM_USER_UNKNOWN;
+	}
+	pam_syslog(pamh, LOG_ERR, "pwaccess failed: %s", error ? error : strerror(-r));
+	free(error);
+	return PAM_AUTHINFO_UNAVAIL;
+    }
+    *daysleft = dl;
+
+    switch(r) {
+        case PWA_EXPIRED_NO:
+	    if (!pwchangeable) {
+	        D(("password change too recent"));
+                return PAM_AUTHTOK_ERR;
+	    }
+	    retval = PAM_SUCCESS;
+	    break;
+        case PWA_EXPIRED_YES:
+            retval = PAM_ACCT_EXPIRED;
+            break;
+        case PWA_EXPIRED_CHANGE_PW:
+            retval = PAM_NEW_AUTHTOK_REQD;
+            break;
+        case PWA_EXPIRED_DISABLED:
+            retval = PAM_AUTHTOK_EXPIRED;
+            break;
+        default:
+	    retval = PAM_SYSTEM_ERR;
+    }
+
+    return retval;
+}
+
+static int _unix_pwaccess_verify_password(pam_handle_t *pamh, const char *passwd,
+			      unsigned long long ctrl, const char *user)
+{
+    int  r;
+    bool authenticated = false;
+    bool nullok = false;
+    char *error = NULL;
+
+    D(("called."));
+
+    if (off(UNIX__NONULL, ctrl))
+        nullok = true;
+
+
+    r = pwaccess_verify_password(user, passwd, nullok, &authenticated, &error);
+    if (r < 0 || error) {
+        if (PWACCESS_IS_NOT_RUNNING(r)) {
+	    free(error);
+	    return PAM_SYSTEM_ERR;
+	}
+	if (r == -ENOENT) {
+	    free(error);
+	    return PAM_USER_UNKNOWN;
+	}
+	pam_syslog(pamh, LOG_ERR, "pwaccess failed: %s", error ? error : strerror(-r));
+	free(error);
+	return PAM_AUTHINFO_UNAVAIL;
+    }
+
+    if (authenticated)
+	return PAM_SUCCESS;
+
+    return PAM_AUTH_ERR;
+}
+#endif
+
 static int _unix_run_helper_binary(pam_handle_t *pamh, const char *passwd,
 				   unsigned long long ctrl, const char *user)
 {
@@ -686,6 +776,13 @@ _unix_blankpasswd (pam_handle_t *pamh, unsigned long long ctrl, const char *name
 		retval = get_pwd_hash(pamh, name, &pwd, &salt);
 
 		if (retval == PAM_UNIX_RUN_HELPER) {
+#ifdef USE_PWACCESS
+		        retval = _unix_pwaccess_verify_password(pamh, NULL, ctrl, name);
+			if (retval == PAM_SUCCESS)
+				blank = nonexistent_check;
+			else if (retval != PAM_AUTH_ERR)
+			  /* Fallback to unix_chkpwd if pwaccess reports an error */
+#endif
 			if (_unix_run_helper_binary(pamh, NULL, ctrl, name) == PAM_SUCCESS)
 				blank = nonexistent_check;
 		} else if (retval == PAM_USER_UNKNOWN) {
@@ -742,6 +839,11 @@ int _unix_verify_password(pam_handle_t * pamh, const char *name
 	if (retval != PAM_SUCCESS) {
 		if (retval == PAM_UNIX_RUN_HELPER) {
 			D(("running helper binary"));
+#ifdef USE_PWACCESS
+			retval = _unix_pwaccess_verify_password(pamh, p, ctrl, name);
+			if (retval != PAM_SUCCESS && retval != PAM_AUTH_ERR)
+			  /* Fallback to unix_chkpwd if pwaccess reports an error */
+#endif
 			retval = _unix_run_helper_binary(pamh, p, ctrl, name);
 		} else {
 			D(("user's record unavailable"));
@@ -881,7 +983,11 @@ _unix_verify_user(pam_handle_t *pamh,
         return PAM_SUCCESS;
 
     if (retval == PAM_UNIX_RUN_HELPER) {
-        retval = _unix_run_verify_binary(pamh, ctrl, name, daysleft);
+#ifdef USE_PWACCESS
+        retval = _unix_pwaccess_check_expired(pamh, name, daysleft);
+        if (retval == PAM_SYSTEM_ERR) /* pwaccess not running */
+#endif
+	    retval = _unix_run_verify_binary(pamh, ctrl, name, daysleft);
         if (retval == PAM_AUTHINFO_UNAVAIL &&
             on(UNIX_BROKEN_SHADOW, ctrl))
             return PAM_SUCCESS;
diff --git a/modules/pam_unix/support.h b/modules/pam_unix/support.h
index 759b7ba0..9061ab27 100644
--- a/modules/pam_unix/support.h
+++ b/modules/pam_unix/support.h
@@ -179,4 +179,6 @@ extern int _unix_verify_user(pam_handle_t *pamh, unsigned long long ctrl,
 extern int _unix_run_verify_binary(pam_handle_t *pamh,
 				   unsigned long long ctrl,
 				   const char *user, long *daysleft);
+extern int _unix_pwaccess_check_expired(pam_handle_t *pamh,
+					const char *user, long *daysleft);
 #endif /* _PAM_UNIX_SUPPORT_H */
